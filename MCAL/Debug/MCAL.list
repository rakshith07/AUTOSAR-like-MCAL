
MCAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800040c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010435  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000085a  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000353  00000000  00000000  00010cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000077  00000000  00000000  000110e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001952  00000000  00000000  00011157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000724  00000000  00000000  00012aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000079ae  00000000  00000000  000131cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001ac  00000000  00000000  0001ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0001ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d4 	.word	0x080003d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d4 	.word	0x080003d4

08000170 <Dio_WritePort>:

    return level;
}

void Dio_WritePort(Dio_PortType portId, Dio_PortLevelType level)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	807b      	strh	r3, [r7, #2]
    VALIDATE( DioGlobal.InitRun, DIO_READCHANNELGROUP_ID, DIO_E_UNINIT );
    VALIDATE( IS_VALID_PORT(portId), DIO_WRITEPORT_ID, DIO_E_PARAM_INVALID_PORT_ID );

    GPIO_Write(GPIO_ports[portId], level);
 800017c:	4a06      	ldr	r2, [pc, #24]	; (8000198 <Dio_WritePort+0x28>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000184:	887a      	ldrh	r2, [r7, #2]
 8000186:	4611      	mov	r1, r2
 8000188:	4618      	mov	r0, r3
 800018a:	f000 f849 	bl	8000220 <GPIO_Write>

    return;
 800018e:	bf00      	nop
}
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	080003ec 	.word	0x080003ec

0800019c <Dio_WriteChannel>:

    return (level);
}

void Dio_WriteChannel(Dio_ChannelType channelId, Dio_LevelType level)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	70fb      	strb	r3, [r7, #3]
    VALIDATE( DioGlobal.InitRun, DIO_WRITECHANNEL_ID, DIO_E_UNINIT );
    VALIDATE( IS_VALID_CHANNEL(channelId), DIO_WRITECHANNEL_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);

    Dio_PortLevelType portVal = GPIO_ReadOutputData(GPIO_ports[DIO_GET_PORT_FROM_CHANNEL_ID(channelId)]);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	091b      	lsrs	r3, r3, #4
 80001ac:	4a15      	ldr	r2, [pc, #84]	; (8000204 <Dio_WriteChannel+0x68>)
 80001ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 f828 	bl	8000208 <GPIO_ReadOutputData>
 80001b8:	4603      	mov	r3, r0
 80001ba:	81fb      	strh	r3, [r7, #14]
    Dio_PortLevelType bit = DIO_GET_BIT_FROM_CHANNEL_ID(channelId);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f003 030f 	and.w	r3, r3, #15
 80001c2:	2201      	movs	r2, #1
 80001c4:	fa02 f303 	lsl.w	r3, r2, r3
 80001c8:	81bb      	strh	r3, [r7, #12]

    if(level == STD_HIGH){
 80001ca:	78fb      	ldrb	r3, [r7, #3]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d104      	bne.n	80001da <Dio_WriteChannel+0x3e>
        portVal |= bit;
 80001d0:	89fa      	ldrh	r2, [r7, #14]
 80001d2:	89bb      	ldrh	r3, [r7, #12]
 80001d4:	4313      	orrs	r3, r2
 80001d6:	81fb      	strh	r3, [r7, #14]
 80001d8:	e008      	b.n	80001ec <Dio_WriteChannel+0x50>
    }else{
        portVal &= ~bit;
 80001da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80001de:	43db      	mvns	r3, r3
 80001e0:	b21a      	sxth	r2, r3
 80001e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001e6:	4013      	ands	r3, r2
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	81fb      	strh	r3, [r7, #14]
    }

    Dio_WritePort(DIO_GET_PORT_FROM_CHANNEL_ID(channelId), portVal);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	091b      	lsrs	r3, r3, #4
 80001f0:	89fa      	ldrh	r2, [r7, #14]
 80001f2:	4611      	mov	r1, r2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffbb 	bl	8000170 <Dio_WritePort>

    return;
 80001fa:	bf00      	nop
}
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	080003ec 	.word	0x080003ec

08000208 <GPIO_ReadOutputData>:




uint16 GPIO_ReadOutputData(GPIO_ts* GPIOx)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16)GPIOx->ODR);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	b29b      	uxth	r3, r3
}
 8000216:	4618      	mov	r0, r3
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <GPIO_Write>:




void GPIO_Write(GPIO_ts* GPIOx, uint16 PortVal)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	460b      	mov	r3, r1
 800022a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800022c:	887a      	ldrh	r2, [r7, #2]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60da      	str	r2, [r3, #12]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <main>:

#include "HW_Dependent_header.h"
#include "Dio.h"

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08a      	sub	sp, #40	; 0x28
 8000240:	af00      	add	r7, sp, #0

  RCC->APB2ENR |=  RCC_APB2ENR_IOPCEN;
 8000242:	4b3a      	ldr	r3, [pc, #232]	; (800032c <main+0xf0>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a39      	ldr	r2, [pc, #228]	; (800032c <main+0xf0>)
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6193      	str	r3, [r2, #24]
  GPIOC->CRH   &= ~0xF00000;
 800024e:	4b38      	ldr	r3, [pc, #224]	; (8000330 <main+0xf4>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a37      	ldr	r2, [pc, #220]	; (8000330 <main+0xf4>)
 8000254:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000258:	6053      	str	r3, [r2, #4]
  GPIOC->CRH   |=  0x100000;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <main+0xf4>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a34      	ldr	r2, [pc, #208]	; (8000330 <main+0xf4>)
 8000260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000264:	6053      	str	r3, [r2, #4]
  Dio_ChannelType LightPin = (Dio_ChannelType)45;
 8000266:	232d      	movs	r3, #45	; 0x2d
 8000268:	607b      	str	r3, [r7, #4]
	while(1)
	{
	(void) Dio_WriteChannel( LightPin, STD_HIGH);
 800026a:	2101      	movs	r1, #1
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ff95 	bl	800019c <Dio_WriteChannel>
	for(uint32 i=0 ; i < 300000 ; i++ );
 8000272:	2300      	movs	r3, #0
 8000274:	627b      	str	r3, [r7, #36]	; 0x24
 8000276:	e002      	b.n	800027e <main+0x42>
 8000278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027a:	3301      	adds	r3, #1
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
 800027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000280:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <main+0xf8>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d9f8      	bls.n	8000278 <main+0x3c>
	for(uint32 i=0 ; i < 300000 ; i++ );
 8000286:	2300      	movs	r3, #0
 8000288:	623b      	str	r3, [r7, #32]
 800028a:	e002      	b.n	8000292 <main+0x56>
 800028c:	6a3b      	ldr	r3, [r7, #32]
 800028e:	3301      	adds	r3, #1
 8000290:	623b      	str	r3, [r7, #32]
 8000292:	6a3b      	ldr	r3, [r7, #32]
 8000294:	4a27      	ldr	r2, [pc, #156]	; (8000334 <main+0xf8>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <main+0x50>
	for(uint32 i=0 ; i < 300000 ; i++ );
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
 800029e:	e002      	b.n	80002a6 <main+0x6a>
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	4a22      	ldr	r2, [pc, #136]	; (8000334 <main+0xf8>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d9f8      	bls.n	80002a0 <main+0x64>
	(void) Dio_WriteChannel( LightPin, STD_LOW);
 80002ae:	2100      	movs	r1, #0
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ff73 	bl	800019c <Dio_WriteChannel>
	for(uint32 i=0 ; i < 300000 ; i++ );
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
 80002ba:	e002      	b.n	80002c2 <main+0x86>
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	3301      	adds	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
 80002c2:	69bb      	ldr	r3, [r7, #24]
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <main+0xf8>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d9f8      	bls.n	80002bc <main+0x80>
	for(uint32 i=0 ; i < 300000 ; i++ );
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e002      	b.n	80002d6 <main+0x9a>
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	3301      	adds	r3, #1
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <main+0xf8>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d9f8      	bls.n	80002d0 <main+0x94>
	for(uint32 i=0 ; i < 300000 ; i++ );
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e002      	b.n	80002ea <main+0xae>
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	3301      	adds	r3, #1
 80002e8:	613b      	str	r3, [r7, #16]
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	4a11      	ldr	r2, [pc, #68]	; (8000334 <main+0xf8>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d9f8      	bls.n	80002e4 <main+0xa8>
	(void) Dio_WriteChannel( LightPin, STD_HIGH);
 80002f2:	2101      	movs	r1, #1
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f7ff ff51 	bl	800019c <Dio_WriteChannel>
	for(uint32 i=0 ; i < 300000 ; i++ );
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	e002      	b.n	8000306 <main+0xca>
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3301      	adds	r3, #1
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <main+0xf8>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d9f8      	bls.n	8000300 <main+0xc4>
	(void) Dio_WriteChannel( LightPin, STD_LOW);
 800030e:	2100      	movs	r1, #0
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ff43 	bl	800019c <Dio_WriteChannel>
	for(uint32 i=0 ; i < 300000 ; i++ );
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	e002      	b.n	8000322 <main+0xe6>
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <main+0xf8>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d9f8      	bls.n	800031c <main+0xe0>
	(void) Dio_WriteChannel( LightPin, STD_HIGH);
 800032a:	e79e      	b.n	800026a <main+0x2e>
 800032c:	40021000 	.word	0x40021000
 8000330:	40011000 	.word	0x40011000
 8000334:	000493df 	.word	0x000493df

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff67 	bl	800023c <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	; (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2600      	movs	r6, #0
 80003a2:	4d0a      	ldr	r5, [pc, #40]	; (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	08000404 	.word	0x08000404
 80003c8:	08000404 	.word	0x08000404
 80003cc:	08000404 	.word	0x08000404
 80003d0:	08000408 	.word	0x08000408

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
